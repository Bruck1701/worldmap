{"version":3,"sources":["views/Dashboard/components/mapapp.js","views/Dashboard/Dashboard.js"],"names":["MapApp","props","state","country","confirmed","deaths","totaldeaths","totalcases","Intl","NumberFormat","style","format","world","totalDeaths","handler","bind","target","this","onCountryChange","size","mobile","tablet","laptop","laptopL","desktop","device","mobileS","desktopL","Map","styled","div","layerProps","onMouseEnter","setState","attributes","name","value","onMouseLeave","onClick","console","log","className","zoomIn","zoomOut","resetTransform","Fragment","align","React","Component","brandSuccess","getStyle","brandInfo","brandDanger","CustomTooltips","random","min","max","Math","floor","data1","data2","data3","i","push","hexToRgba","ceil","Dashboard","loading","toggle","onRadioBtnClick","dropdownOpen","radioSelected","term","Row","Col","xs","sm","lg","Card","CardBody","height","href","CardTitle","md","changeCountry"],"mappings":"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","file":"static/js/41.06ee7007.chunk.js","sourcesContent":["import React from \"react\";\nimport styled, { css } from \"styled-components\";\n//import Container from \"react-bootstrap/Container\";\n\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport \"./mapapp.css\";\n\nimport { VectorMap } from \"@south-paw/react-vector-maps\";\nimport world from \"../world\";\n\n//import SideBar from \"./components/sidebar\";\n\nclass MapApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: \"\",\n      confirmed: 0,\n      deaths: 0,\n      totaldeaths: 0,\n      totalcases: 0\n    };\n\n    this.state = {\n      totaldeaths: new Intl.NumberFormat(\"en\", {\n        style: \"decimal\"\n      }).format(world.totalDeaths),\n      totalcases: new Intl.NumberFormat(\"en\", {\n        style: \"decimal\"\n      }).format(world.totalcases)\n    };\n    //\n    // this.onInputChange = this.onInputChange.bind(this);\n\n    //  this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n    this.handler = this.handler.bind(this);\n  }\n\n  // createCSS() {\n  //   let styles = \"\";\n  //\n  //   for (let i = 0; i < world.layers.length; i += 1) {\n  //     styles +=\n  //       `\n  //\n  //          &[id=\\\"` +\n  //       world.layers[i].id +\n  //       `\\\"] {\n  //            fill: ` +\n  //       world.layers[i].color +\n  //       `\n  //\n  //        }\n  //      `;\n  //   }\n  //\n  //   console.log(styles);\n  //\n  //   return css`\n  //     ${styles}\n  //   `;\n  // }\n\n  handler({ target }) {\n    //console.log({ term });\n    this.props.onCountryChange({ target });\n  }\n\n  render() {\n    const size = {\n      mobile: \"320px\",\n      tablet: \"768px\",\n      laptop: \"1024px\",\n      laptopL: \"1440px\",\n      desktop: \"2560px\"\n    };\n\n    const device = {\n      mobile: `(min-width: ${size.mobileS})`,\n      tablet: `(min-width: ${size.tablet})`,\n      laptop: `(min-width: ${size.laptop})`,\n      laptopL: `(min-width: ${size.laptopL})`,\n      desktop: `(min-width: ${size.desktop})`,\n      desktopL: `(min-width: ${size.desktop})`\n    };\n\n    const Map = styled.div`\n      margin: 1rem auto;\n      object-fit: contain;\n      align: center;\n      width: 320px;\n\n      @media ${device.laptop} {\n        width: 800px;\n      }\n\n      @media ${device.desktop} {\n        width: 1400px;\n      }\n\n      @media ${device.mobile} {\n        width: 320px;\n      }\n      /* display: flex;\n      flex-direction: row;\n      @media (max-width: 768px) {\n        flex-direction: column;\n      } */\n\n      svg {\n        stroke: #fff;\n\n        // All layers are just path elements\n        path {\n          fill: green;\n          cursor: pointer;\n          outline: none;\n\n          // When a layer is hovered\n          &:hover {\n            fill: rgba(168, 43, 43, 0.83);\n          }\n\n          // When a layer is focused.\n          &:focus {\n            fill: rgba(168, 43, 43, 0.6);\n          }\n        }\n      }\n    `;\n\n    const layerProps = {\n      onMouseEnter: ({ target }) => {\n        //console.log(this.props);\n        //this.props.changeCountry({ target });\n        this.handler({ target });\n        this.setState({\n          country: target.attributes.name.value,\n          confirmed: new Intl.NumberFormat(\"en\", {\n            style: \"decimal\"\n          }).format(target.attributes.confirmed.value),\n          deaths: new Intl.NumberFormat(\"en\", {\n            style: \"decimal\"\n          }).format(target.attributes.deaths.value)\n        });\n        //console.log(this.state.country);\n      },\n      onMouseLeave: ({ target }) =>\n        this.setState({ country: \"\", confirmed: 0, deaths: 0 }),\n      onClick: ({ target }) => console.log(target.attributes.name.value)\n    };\n\n    return (\n      <div className=\"mapArea\">\n        <TransformWrapper>\n          {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n            <React.Fragment>\n              <div className=\"tools\" align=\"right\">\n                <button onClick={zoomIn}>+</button>\n                <button onClick={zoomOut}>-</button>\n                <button onClick={resetTransform}>x</button>\n              </div>\n              <TransformComponent>\n                <Map>\n                  <VectorMap\n                    {...world}\n                    // onMouseEnter={({ target }) => {\n                    //   console.log(\"Div is clicked\", target.attributes.name.value);\n                    // }}\n                    layerProps={layerProps}\n                  />\n                </Map>\n              </TransformComponent>\n            </React.Fragment>\n          )}\n        </TransformWrapper>\n      </div>\n    );\n  }\n}\n\nexport default MapApp;\n","import React, { Component, lazy, Suspense } from \"react\";\nimport { Bar, Line } from \"react-chartjs-2\";\nimport { Card, CardBody, CardTitle, Col, Row } from \"reactstrap\";\nimport { CustomTooltips } from \"@coreui/coreui-plugin-chartjs-custom-tooltips\";\nimport { getStyle, hexToRgba } from \"@coreui/coreui/dist/js/coreui-utilities\";\n\nimport MapApp from \"./components/mapapp\";\n//\n// const Widget03 = lazy(() => import(\"../../views/Widgets/Widget03\"));\n//\nconst brandPrimary = getStyle(\"--primary\");\nconst brandSuccess = getStyle(\"--success\");\nconst brandInfo = getStyle(\"--info\");\nconst brandWarning = getStyle(\"--warning\");\nconst brandDanger = getStyle(\"--danger\");\n\n// Card Char\n\n// sparkline charts\nconst sparkLineChartData = [\n  {\n    data: [35, 23, 56, 22, 97, 23, 64],\n    label: \"New Clients\"\n  },\n  {\n    data: [65, 59, 84, 84, 51, 55, 40],\n    label: \"Recurring Clients\"\n  },\n  {\n    data: [35, 23, 56, 22, 97, 23, 64],\n    label: \"Pageviews\"\n  },\n  {\n    data: [65, 59, 84, 84, 51, 55, 40],\n    label: \"Organic\"\n  },\n  {\n    data: [78, 81, 80, 45, 34, 12, 40],\n    label: \"CTR\"\n  },\n  {\n    data: [1, 13, 9, 17, 34, 41, 38],\n    label: \"Bounce Rate\"\n  }\n];\n\nconst makeSparkLineData = (dataSetNo, variant) => {\n  const dataset = sparkLineChartData[dataSetNo];\n  const data = {\n    labels: [\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n      \"Sunday\"\n    ],\n    datasets: [\n      {\n        backgroundColor: \"transparent\",\n        borderColor: variant ? variant : \"#c2cfd6\",\n        data: dataset.data,\n        label: dataset.label\n      }\n    ]\n  };\n  return () => data;\n};\n\nconst sparklineChartOpts = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips\n  },\n  responsive: true,\n  maintainAspectRatio: true,\n  scales: {\n    xAxes: [\n      {\n        display: false\n      }\n    ],\n    yAxes: [\n      {\n        display: false\n      }\n    ]\n  },\n  elements: {\n    line: {\n      borderWidth: 2\n    },\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n      hoverBorderWidth: 3\n    }\n  },\n  legend: {\n    display: false\n  }\n};\n\n// Main Chart\n\n//Random Numbers\nfunction random(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar elements = 27;\nvar data1 = [];\nvar data2 = [];\nvar data3 = [];\n\nfor (var i = 0; i <= elements; i++) {\n  data1.push(random(50, 200));\n  data2.push(random(80, 100));\n  data3.push(65);\n}\n\nconst mainChart = {\n  labels: [\n    \"Mo\",\n    \"Tu\",\n    \"We\",\n    \"Th\",\n    \"Fr\",\n    \"Sa\",\n    \"Su\",\n    \"Mo\",\n    \"Tu\",\n    \"We\",\n    \"Th\",\n    \"Fr\",\n    \"Sa\",\n    \"Su\",\n    \"Mo\",\n    \"Tu\",\n    \"We\",\n    \"Th\",\n    \"Fr\",\n    \"Sa\",\n    \"Su\",\n    \"Mo\",\n    \"Tu\",\n    \"We\",\n    \"Th\",\n    \"Fr\",\n    \"Sa\",\n    \"Su\"\n  ],\n  datasets: [\n    {\n      label: \"My First dataset\",\n      backgroundColor: hexToRgba(brandInfo, 10),\n      borderColor: brandInfo,\n      pointHoverBackgroundColor: \"#fff\",\n      borderWidth: 2,\n      data: data1\n    },\n    {\n      label: \"My Second dataset\",\n      backgroundColor: \"transparent\",\n      borderColor: brandSuccess,\n      pointHoverBackgroundColor: \"#fff\",\n      borderWidth: 2,\n      data: data2\n    },\n    {\n      label: \"My Third dataset\",\n      backgroundColor: \"transparent\",\n      borderColor: brandDanger,\n      pointHoverBackgroundColor: \"#fff\",\n      borderWidth: 1,\n      borderDash: [8, 5],\n      data: data3\n    }\n  ]\n};\n\nconst mainChartOpts = {\n  tooltips: {\n    enabled: false,\n    custom: CustomTooltips,\n    intersect: true,\n    mode: \"index\",\n    position: \"nearest\",\n    callbacks: {\n      labelColor: function(tooltipItem, chart) {\n        return {\n          backgroundColor:\n            chart.data.datasets[tooltipItem.datasetIndex].borderColor\n        };\n      }\n    }\n  },\n  maintainAspectRatio: false,\n  legend: {\n    display: false\n  },\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          drawOnChartArea: false\n        }\n      }\n    ],\n    yAxes: [\n      {\n        ticks: {\n          beginAtZero: true,\n          maxTicksLimit: 5,\n          stepSize: Math.ceil(250 / 5),\n          max: 250\n        }\n      }\n    ]\n  },\n  elements: {\n    point: {\n      radius: 0,\n      hitRadius: 10,\n      hoverRadius: 4,\n      hoverBorderWidth: 3\n    }\n  }\n};\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.onRadioBtnClick = this.onRadioBtnClick.bind(this);\n\n    this.state = {\n      dropdownOpen: false,\n      radioSelected: 2,\n      country: \"\",\n      confirmed: 0,\n      deaths: 0,\n      totaldeaths: 0,\n      totalcases: 0\n    };\n    // this.state = {\n    //   totalDeaths: new Intl.NumberFormat(\"en\", {\n    //     style: \"decimal\"\n    //   }).format(world.totalDeaths),\n    //   totalCases: new Intl.NumberFormat(\"en\", {\n    //     style: \"decimal\"\n    //   }).format(world.totalCases)\n    // };\n  }\n\n  toggle() {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  }\n\n  onRadioBtnClick(radioSelected) {\n    this.setState({\n      radioSelected: radioSelected\n    });\n  }\n\n  loading = () => (\n    <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\n  );\n\n  changeCountry(term) {\n    //console.log(term.term.target.attributes.name.value);\n    this.setState({\n      country: term.term.target.attributes.name.value,\n      confirmed: new Intl.NumberFormat(\"en\", {\n        style: \"decimal\"\n      }).format(term.term.target.attributes.confirmed.value),\n      deaths: new Intl.NumberFormat(\"en\", {\n        style: \"decimal\"\n      }).format(term.term.target.attributes.deaths.value)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"animated fadeIn\">\n        <Row>\n          <div className=\"Myheader\">Coronavirus Disease 2020</div>\n        </Row>\n        <Row>\n          <div className=\"countryName\">Country: {this.state.country}</div>\n        </Row>\n        <Row align=\"right\">\n          <Col xs=\"12\" sm=\"6\" lg=\"3\">\n            <Card className=\"text-white bg-warning\">\n              <CardBody className=\"pb-0\">\n                <div className=\"text-value\">{this.state.confirmed} </div>\n                <div>Number of cases </div>\n              </CardBody>\n              <div className=\"chart-wrapper\" style={{ height: \"35px\" }}></div>\n            </Card>\n          </Col>\n          <Col xs=\"12\" sm=\"6\" lg=\"3\">\n            <Card className=\"text-white bg-danger\">\n              <CardBody className=\"pb-0\">\n                <div className=\"text-value\">{this.state.deaths}</div>\n                <div> Deaths </div>\n              </CardBody>\n              <div\n                className=\"chart-wrapper mx-3\"\n                style={{ height: \"35px\" }}\n              ></div>\n            </Card>\n          </Col>\n        </Row>\n        <div align=\"right\">\n          <small>\n            Data Source:{\" \"}\n            <a href=\"https://github.com/CSSEGISandData/COVID-19\">\n              CSSEGISandData{\" \"}\n            </a>{\" \"}\n          </small>\n        </div>\n        <Row>\n          <Col>\n            <Card>\n              <CardBody>\n                <Row>\n                  <Col sm=\"5\">\n                    <CardTitle className=\"mb-0\"> World map</CardTitle>\n                    <div className=\"small text-muted\">2020</div>\n                  </Col>\n                  <Col sm=\"7\" className=\"d-none d-sm-inline-block\"></Col>\n                </Row>\n                <div align=\"center\">\n                  <MapApp\n                    xs=\"13\"\n                    sm=\"7\"\n                    md=\"9\"\n                    onCountryChange={term => this.changeCountry({ term })}\n                  />\n                </div>\n              </CardBody>\n            </Card>\n\n            <Card>\n              <CardBody>\n                <Row>\n                  <Col sm=\"5\">\n                    <CardTitle className=\"mb-0\">\n                      {\" \"}\n                      Infection and Death curve\n                    </CardTitle>\n                    <div className=\"small text-muted\">2020</div>\n                  </Col>\n                  <Col sm=\"7\" className=\"d-none d-sm-inline-block\"></Col>\n                </Row>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default Dashboard;\n"],"sourceRoot":""}