{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","country","confirmed","deaths","color","Map","styled","div","inputColor","layerProps","onMouseEnter","target","console","log","setState","attributes","name","value","onMouseLeave","className","Container","fluid","this","zoomIn","zoomOut","resetTransform","Fragment","onClick","world","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"m72rCAiHeA,E,kDArGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,QAAS,GACTC,UAAW,EACXC,OAAQ,EACRC,MAAO,SANQ,E,qDAYT,IAAD,OACDC,EAAMC,IAAOC,IAAV,KASK,SAAAR,GAAK,OAAI,EAAKC,MAAMI,SAAe,SAAAL,GAAK,OACpDA,EAAMS,YAAc,WAeN,SAAAT,GAAK,OAAI,EAAKC,MAAMI,SAO9BK,EAAa,CACjBC,aAAc,YAAiB,IAAdC,EAAa,EAAbA,OACfC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZb,QAASU,EAAOI,WAAWC,KAAKC,MAChCf,UAAWS,EAAOI,WAAWb,UAAUe,MACvCd,OAAQQ,EAAOI,WAAWZ,OAAOc,SAIrCC,aAAc,cAAGP,OAAH,OACZ,EAAKG,SAAS,CAAEb,QAAS,GAAIC,UAAW,EAAGC,OAAQ,MAGvD,OACE,yBAAKgB,UAAU,YACb,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACd,yBAAKF,UAAU,UACb,0DACA,wBAAIA,UAAU,SAAd,aAAiCG,KAAKtB,MAAMC,SAC5C,wBAAIkB,UAAU,YACX,IADH,oBAEoBG,KAAKtB,MAAME,UAF/B,IAE0C,6BAF1C,WAGWoB,KAAKtB,MAAMG,OAAQ,OAIlC,kBAACiB,EAAA,EAAD,KACE,kBAAC,IAAD,MACG,gBAAGG,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,eAApB,4DACC,kBAAC,IAAMC,SAAP,KACE,yBAAKP,UAAU,SACb,4BAAQQ,QAASJ,GAAjB,KACA,4BAAQI,QAASH,GAAjB,KACA,4BAAQG,QAASF,GAAjB,MAEF,kBAAC,IAAD,KACE,kBAACpB,EAAD,KACE,kBAAC,YAAD,iBACMuB,EADN,CAKEnB,WAAYA,iB,GAzFhBoB,IAAMC,WCCJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.95afd8c0.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport Container from \"react-bootstrap/Container\";\n\nimport { TransformWrapper, TransformComponent } from \"react-zoom-pan-pinch\";\n\nimport \"./App.css\";\n\nimport { VectorMap } from \"@south-paw/react-vector-maps\";\nimport world from \"./world\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      country: \"\",\n      confirmed: 0,\n      deaths: 0,\n      color: \"green\"\n    };\n    //\n    // this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  render() {\n    const Map = styled.div`\n      margin: 1rem auto;\n      width: 1000px;\n\n      svg {\n        stroke: #fff;\n\n        // All layers are just path elements\n        path {\n          fill: ${props => this.state.color};    //${props =>\n      props.inputColor || \"green\"};\n          cursor: pointer;\n          outline: none;\n\n          // When a layer is hovered\n          &:hover {\n            fill: rgba(168, 43, 43, 0.83);\n          }\n\n          // When a layer is focused.\n          &:focus {\n            fill: rgba(168, 43, 43, 0.6);\n          }\n\n          /* &[id=\"us\"] {\n            fill: ${props => this.state.color};\n          } */\n\n        }\n      }\n    `;\n\n    const layerProps = {\n      onMouseEnter: ({ target }) => {\n        console.log(target);\n        this.setState({\n          country: target.attributes.name.value,\n          confirmed: target.attributes.confirmed.value,\n          deaths: target.attributes.deaths.value\n        });\n        //console.log(this.state.country);\n      },\n      onMouseLeave: ({ target }) =>\n        this.setState({ country: \"\", confirmed: 0, deaths: 0 })\n    };\n\n    return (\n      <div className=\"mainbody\">\n        <Container fluid>\n          <div className=\"splash\">\n            <h2> Coronavirus Disease 2020 </h2>\n            <h4 className=\"cname\"> Country: {this.state.country}</h4>\n            <h4 className=\"datainfo\">\n              {\" \"}\n              Confirmed Cases: {this.state.confirmed} <br />\n              Deaths: {this.state.deaths}{\" \"}\n            </h4>\n          </div>\n        </Container>\n        <Container>\n          <TransformWrapper>\n            {({ zoomIn, zoomOut, resetTransform, ...rest }) => (\n              <React.Fragment>\n                <div className=\"tools\">\n                  <button onClick={zoomIn}>+</button>\n                  <button onClick={zoomOut}>-</button>\n                  <button onClick={resetTransform}>x</button>\n                </div>\n                <TransformComponent>\n                  <Map>\n                    <VectorMap\n                      {...world}\n                      // onMouseEnter={({ target }) => {\n                      //   console.log(\"Div is clicked\", target.attributes.name.value);\n                      // }}\n                      layerProps={layerProps}\n                    />\n                  </Map>\n                </TransformComponent>\n              </React.Fragment>\n            )}\n          </TransformWrapper>\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}